{"version":3,"sources":["utils/token.js","components/wowtoken.js","App.js","serviceWorker.js","index.js"],"names":["showTokenGold","token","WowToken","useState","type","msg","message","setMessage","tokenValue","setTokenValue","refresh","setRefresh","useEffect","getWowTokens","fetch","then","resp","ok","json","data","Promise","resolve","reject","catch","className","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console"],"mappings":"uPAAMA,EAAgB,SAACC,GACrB,OAAIA,EAAM,EACDA,EAAM,IAAO,IAEb,SC0EIC,G,MA1EE,WAAO,IAAD,EACSC,mBAAS,CAACC,KAAM,EAAGC,IAAK,eADjC,mBACdC,EADc,KACLC,EADK,OAEeJ,mBAAS,IAFxB,mBAEdK,EAFc,KAEFC,EAFE,OAGSN,mBAAS,GAHlB,mBAGdO,EAHc,KAGLC,EAHK,KA4DrB,OAxDAC,qBAAU,WACR,IAmBMC,EAAe,WACnB,OAAOC,MAAM,iBACZC,MAAK,SAAAC,GACJ,OAAIA,EAAKC,GACAD,EAAKE,OACXH,MAAK,SAAAI,GAGJ,OAFAZ,EAAW,CAACH,KAAM,EAAGC,IAAK,eAC1BI,EAAcU,GACPC,QAAQC,aAGVD,QAAQE,aAMZT,IACNE,MAAK,eAGLQ,OAAM,WAEL,OArCKT,MAAM,wBACZC,MAAK,SAAAC,GACJ,OAAIA,EAAKC,IAEPV,EAAW,CAACH,KAAM,EAAGC,IAAK,qCAC1BM,EAAW,GACJS,QAAQC,YAEfd,EAAW,CAACH,MAAO,EAAGC,IAAK,kCACpBe,QAAQE,aA6BhBP,MAAK,WACJ,OAAOF,IACNU,OAAM,WACLhB,EAAW,CAACH,MAAO,EAAGC,IAAK,gEAOlC,CAACK,IAEG,sBAAKc,UAAU,cAAf,UACL,8BAAMlB,EAAQD,MACd,gCACE,+BACE,sCAASL,EAAcQ,EAAW,OAClC,sCAASR,EAAcQ,EAAW,OAClC,sCAASR,EAAcQ,EAAW,OAClC,sCAASR,EAAcQ,EAAW,OAClC,sCAASR,EAAcQ,EAAW,iBCxD3BiB,MAXf,WACE,OACE,+BACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAW1B,IACjC,cAAC,IAAD,CAAOyB,KAAK,YAAYC,UAAW1B,UCEvB2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,UACE,cAAC,EAAD,QAGJC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1B,MAAK,SAAA2B,GACJA,EAAaC,gBAEdpB,OAAM,SAAAqB,GACLC,QAAQD,MAAMA,EAAMtC,c","file":"static/js/main.3215f16f.chunk.js","sourcesContent":["const showTokenGold = (token) => {\r\n  if (token>0) {\r\n    return token/1000 + 'G';\r\n  } else {\r\n    return 'Error';\r\n  }\r\n}\r\n\r\nexport { showTokenGold };","import React, {useEffect, useState} from 'react';\r\nimport { showTokenGold } from '../utils/token';\r\nimport './wowtoken.scss';\r\n\r\nconst WowToken = () => {\r\n  const [message, setMessage] = useState({type: 0, msg: 'Loading...'});\r\n  const [tokenValue, setTokenValue] = useState([]);\r\n  const [refresh, setRefresh] = useState(0);\r\n  useEffect(() => {\r\n    const getAuthorize = () => {\r\n      // get access token via authroize flow\r\n      // window.location.href='/api/oauth2/authorize';\r\n\r\n      // get access token via credential flow\r\n      return fetch('/api/oauth2/credflow')\r\n      .then(resp => {\r\n        if (resp.ok) {\r\n          // we can refresh the page\r\n          setMessage({type: 1, msg: 'obtain access token successfully'});\r\n          setRefresh(1);\r\n          return Promise.resolve();\r\n        } else {\r\n          setMessage({type: -1, msg: 'failed to obtain access token'});\r\n          return Promise.reject();\r\n        }\r\n      })\r\n    }\r\n\r\n    const getWowTokens = () => {\r\n      return fetch('/api/wowToken')\r\n      .then(resp => {\r\n        if (resp.ok) {\r\n          return resp.json()\r\n          .then(data => {\r\n            setMessage({type: 2, msg: 'WOW tokens'});\r\n            setTokenValue(data);\r\n            return Promise.resolve();\r\n          })\r\n        } else {\r\n          return Promise.reject();\r\n        }\r\n      });\r\n    }\r\n\r\n    const getWowTokensWithRetry = () => {\r\n      return getWowTokens()\r\n      .then(() => {\r\n        // good do nothing;\r\n      })\r\n      .catch(() => {\r\n        // retry for one time\r\n        return getAuthorize()\r\n        .then(() => {\r\n          return getWowTokens()\r\n          .catch(() => {\r\n            setMessage({type: -2, msg: 'failed to obtain access tokens with access token'});\r\n          });\r\n        })\r\n      })\r\n    }\r\n\r\n    getWowTokensWithRetry();\r\n  }, [refresh]);\r\n\r\n  return <div className='token-table'>\r\n    <div>{message.msg}</div>\r\n    <table>\r\n      <tr>\r\n        <td>CN: {showTokenGold(tokenValue[0])}</td>\r\n        <td>US: {showTokenGold(tokenValue[1])}</td>\r\n        <td>EU: {showTokenGold(tokenValue[2])}</td>\r\n        <td>KR: {showTokenGold(tokenValue[3])}</td>\r\n        <td>TW: {showTokenGold(tokenValue[4])}</td>\r\n      </tr>\r\n    </table>\r\n  </div>\r\n}\r\n\r\nexport default WowToken;","import React from 'react';\nimport './App.css';\nimport { Switch, Route } from 'react-router-dom';\nimport WowToken from './components/wowtoken';\n\nfunction App() {\n  return (\n    <main>\n      <Switch>\n        <Route exact path='/' component={WowToken}/>\n        <Route path='/wowtoken' component={WowToken}/>\n      </Switch>\n    </main>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}